{"ast":null,"code":"import axios from \"axios\";\nimport { authStore } from \"../Redux/AuthState\";\nimport authService from \"./AuthService\";\nclass InterceptorsService {\n  createInterceptors() {\n    axios.interceptors.request.use(request => {\n      if (authService.isLoggedIn()) {\n        request.headers.Authorization = {\n          authorization: \"Bearer \" + authStore.getState().token\n        };\n      }\n      return request;\n    });\n  }\n}\nconst interceptorsService = new InterceptorsService();\nexport default interceptorsService;","map":{"version":3,"names":["axios","authStore","authService","InterceptorsService","createInterceptors","interceptors","request","use","isLoggedIn","headers","Authorization","authorization","getState","token","interceptorsService"],"sources":["C:/Users/alexe/OneDrive/Desktop/Fullstack course/html example/new folder/exercise in class/18.03.24/Non Secured System/Frontend/src/Services/InterceptorsService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { authStore } from \"../Redux/AuthState\";\r\nimport authService from \"./AuthService\";\r\n\r\nclass InterceptorsService {\r\n\r\n    public createInterceptors(): void {\r\n\r\n        axios.interceptors.request.use(request => {\r\n            if (authService.isLoggedIn()) {\r\n                request.headers.Authorization = {\r\n                    authorization: \"Bearer \" + authStore.getState().token\r\n                };\r\n            }\r\n            return request;\r\n        });\r\n    }\r\n}\r\n\r\nconst interceptorsService = new InterceptorsService();\r\n\r\nexport default interceptorsService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,mBAAmB,CAAC;EAEfC,kBAAkBA,CAAA,EAAS;IAE9BJ,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACD,OAAO,IAAI;MACtC,IAAIJ,WAAW,CAACM,UAAU,CAAC,CAAC,EAAE;QAC1BF,OAAO,CAACG,OAAO,CAACC,aAAa,GAAG;UAC5BC,aAAa,EAAE,SAAS,GAAGV,SAAS,CAACW,QAAQ,CAAC,CAAC,CAACC;QACpD,CAAC;MACL;MACA,OAAOP,OAAO;IAClB,CAAC,CAAC;EACN;AACJ;AAEA,MAAMQ,mBAAmB,GAAG,IAAIX,mBAAmB,CAAC,CAAC;AAErD,eAAeW,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}